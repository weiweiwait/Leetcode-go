func permuteUnique(nums []int) [][]int {
    result := make([][]int, 0)
    var path []int
    var visit = make([]bool, len(nums))
    map1 := make(map[string]bool)
    dfs(len(nums), nums, &result, path, visit, map1)
    return result
}

func dfs(len2 int, nums []int, result *[][]int, path []int, visit []bool, map1 map[string]bool) {
    if len(path) == len(nums) {
        pathCopy := append([]int(nil), path...)
        pathKey := fmt.Sprintf("%v", pathCopy)
        if !map1[pathKey] {
            map1[pathKey] = true
            *result = append(*result, pathCopy)
        }
        return
    }
    for i := 0; i < len(nums); i++ {
        if visit[i] {
            continue
        }
        visit[i] = true
        path = append(path, nums[i])
        dfs(len2+1, nums, result, path, visit, map1)
        path = path[:len(path)-1] // 回溯
        visit[i] = false
    }
}
