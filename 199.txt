/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func rightSideView(root *TreeNode) []int {

    if root == nil {
        return []int{}
    }

    var queue []*TreeNode
    queue = append(queue, root) 
    result := make([][]int, 0)
    var result1 []int
    for y:=0;len(queue) > 0;y++ {
        levelSize := len(queue) 
        level := make([]int, 0)

    
        for i := 0; i < levelSize; i++ {
        
            current := queue[0]
            queue = queue[1:] 
            level = append(level, current.Val) 
            if i == levelSize-1 {
                result1 = append(result1, current.Val) 
            }

            if current.Left != nil {
                queue = append(queue, current.Left)
            }
            if current.Right != nil {
                queue = append(queue, current.Right)
            }
     
        }
        
        result = append(result, level)
    }

    return result1
}