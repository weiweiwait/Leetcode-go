func coinChange(coins []int, amount int) int {
    n := len(coins)
    memo := make([][]int, n)
    for i := range memo {
        memo[i] = make([]int, amount+1)
        for j := range memo[i] {
            memo[i][j] = -1 // -1 表示没有访问过
        }
    }
    var dfs func(int, int) int
    dfs = func(i, c int) (res int) {
        if i < 0 {
            if c == 0 {
                return 0
            }
            return math.MaxInt / 2 // 除 2 是防止下面 + 1 溢出
        }
        p := &memo[i][c]
        if *p != -1 {
            return *p
        }
        defer func() { *p = res }()
        if c < coins[i] {
            return dfs(i-1, c)
        }
        return min(dfs(i-1, c), dfs(i, c-coins[i])+1)
    }
    ans := dfs(n-1, amount)
    if ans < math.MaxInt/2 {
        return ans
    }
    return -1
}
