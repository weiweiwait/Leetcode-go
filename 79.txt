var(
    dx [4]int
    dy [4]int
    visited [][]bool
)
func exist(board [][]byte, word string) bool {
    dx = [4]int{-1,0,1,0}
    dy = [4]int{0,1,0,-1}
    rows , cols := len(board),len(board[0])
    visited = make([][]bool,rows)
    for i:= range visited{
        visited[i] = make([]bool,cols)
    }
    for i := 0;i<rows;i++{
        for j:=0;j<cols;j++{
            if backtrace(board , word , i ,j ,0){
                return true
            }
        }
    }
    return  false
}
func backtrace(board [][]byte,word string,x,y,index int) bool{
    if board[x][y] != word[index]{
        return false
    }
    if index == len(word)-1{
        return true
    }
    visited[x][y] = true
    for i:=0;i<4;i++{
        newX , newY := x + dx[i],y + dy[i]
        if newX >= 0 && newX < len(board) && newY >= 0 && newY < len(board[0]) && !visited[newX][newY]{
            if backtrace(board,word,newX,newY,index+1){
                return true
            }
        }
    }
    visited[x][y] = false
    return false
}