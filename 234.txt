/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func isPalindrome(head *ListNode) bool {
    if head == nil{
        return true
    }
    firstHalfEnd := endOfFirstHalf(head)
    secondHalfStart := reverseList(firstHalfEnd.Next)
    p1 := head
    p2 := secondHalfStart
    result := true
    for result && p2 != nil{
        if p1.Val != p2.Val{
            result = false
        }
        p1 = p1.Next
        p2 = p2.Next
    }
    firstHalfEnd.Next = reverseList(secondHalfStart)
    return result
}
func reverseList(head *ListNode) *ListNode{
    var prev,cur *ListNode = nil,head
    for cur != nil{
        nextTmp := cur.Next
        cur.Next = prev
        prev = cur
        cur = nextTmp
    }
    return prev
}
func endOfFirstHalf(head *ListNode) *ListNode{
    fast := head
    slow := head
    for fast.Next != nil && fast.Next.Next != nil{
        fast = fast.Next.Next
        slow = slow.Next
    }
    return slow
}