func minDistance(s, t string) int {
    n, m := len(s), len(t)
    memo := make([][]int, n)
    for i := range memo {
        memo[i] = make([]int, m)
        for j := range memo[i] {
            memo[i][j] = -1 // -1 表示还没有计算过
        }
    }
    var dfs func(int, int) int
    dfs = func(i, j int) (res int) {
        if i < 0 {
            return j + 1
        }
        if j < 0 {
            return i + 1
        }
        p := &memo[i][j]
        if *p != -1 {
            return *p
        }
        defer func() { *p = res }()
        if s[i] == t[j] {
            return dfs(i-1, j-1)
        }
        return min(min(dfs(i-1, j), dfs(i, j-1)), dfs(i-1, j-1)) + 1
    }
    return dfs(n-1, m-1)
}

func min(a, b int) int { if b < a { return b }; return a }
