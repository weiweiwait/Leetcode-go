func longestValidParentheses(s string) int {
    stack := []int{-1}  //初始化栈，并且在栈底部放一个-1，提供一个起始位置。
    maxLength := 0       //初始化最长有效括号的长度

    for i:=0; i<len(s); i++ {
        if s[i] == '(' { //左括号入栈
            stack = append(stack, i)
        } else { //遇到右括号
            stack = stack[:len(stack)-1] //将栈顶元素弹出，表示匹配到一个有效的括号
            if len(stack) == 0 {  //栈为空
                stack = append(stack, i) //将当前位置放入栈底
            } else {  //栈不为空
                // 比较并更新最长有效括号的长度
                length := i - stack[len(stack)-1] 
                if length > maxLength {
                    maxLength = length
                }
            }
        }
    }
    return maxLength
}
func longestValidParentheses(s string) int {
    maxAns := 0
    dp := make([]int, len(s))
    for i := 1; i < len(s); i++ {
        if s[i] == ')' {
            if s[i-1] == '(' {
                if i >= 2 {
                    dp[i] = dp[i - 2] + 2
                } else {
                    dp[i] = 2
                }
            } else if i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(' {
                if i - dp[i - 1] >= 2 {
                    dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2
                } else {
                    dp[i] = dp[i - 1] + 2
                }
            }
            maxAns = max(maxAns, dp[i])
        }
    }
    return maxAns
}

func max(x, y int) int {
    if x > y {
        return x
    }
    return y
}